// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios16.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SecuredCallsVoiceSDK
import AVFoundation
import AVKit
import CallKit
import Combine
import CommonCrypto
import Contacts
import CoreData
import CoreImage
import CoreLocation
import DeveloperToolsSupport
import Foundation
import OSLog
import Photos
import PushKit
@_exported import SecuredCallsVoiceSDK
import Security
import Swift
import SwiftUI
import Swinject
import SwinjectAutoregistration
import UIKit
import UserNotifications
import VonageClientSDK
import VonageClientSDKVoice
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum LocationError : Swift.Error {
  case permissionDenied
  case locationUnavailable
  case timeout
  public static func == (a: SecuredCallsVoiceSDK.LocationError, b: SecuredCallsVoiceSDK.LocationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct MarqueeText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var text: Swift.String
  @_Concurrency.MainActor @preconcurrency public var font: UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency public var leftFade: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var rightFade: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var startDelay: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var alignment: SwiftUICore.Alignment
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(text: Swift.String, font: UIKit.UIFont, leftFade: CoreFoundation.CGFloat, rightFade: CoreFoundation.CGFloat, startDelay: Swift.Double, alignment: SwiftUICore.Alignment? = nil)
  public typealias Body = @_opaqueReturnTypeOf("$s20SecuredCallsVoiceSDK11MarqueeTextV4bodyQrvp", 0) __
}
extension SecuredCallsVoiceSDK.MarqueeText {
  @_Concurrency.MainActor @preconcurrency public func makeCompact(_ compact: Swift.Bool = true) -> SecuredCallsVoiceSDK.MarqueeText
}

extension SecuredCallsVoiceSDK.UserEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SecuredCallsVoiceSDK.UserEntity>
  @objc @NSManaged dynamic public var businessName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Foundation.UUID? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var image: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var intent: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mobileNo: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notes: Swift.String? {
    @objc get
    @objc set
  }
}
extension SecuredCallsVoiceSDK.BrandingEntity {
  public var wrappedAnswerCallButtonBackgroundColor: Swift.String {
    get
  }
  public var wrappedAnswerCallButtonForegroundColor: Swift.String {
    get
  }
  public var wrappedBackgroundColor: Swift.String {
    get
  }
  public var wrappedEndCallButtonBackgroundColor: Swift.String {
    get
  }
  public var wrappedEndCallButtonForegroundColor: Swift.String {
    get
  }
  public var wrappedIntent: Swift.String {
    get
  }
  public var wrappedOtherButtonBackgroundColor: Swift.String {
    get
  }
  public var wrappedOtherButtonForegroundColor: Swift.String {
    get
  }
  public var wrappedBrandName: Swift.String {
    get
  }
  public var wrappedBrandImage: Foundation.Data {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CallHistoryEntity) public class CallHistoryEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Foundation.Bundle {
  public static var app: Foundation.Bundle {
    get
  }
  public var isExtension: Swift.Bool {
    get
  }
  public var appDisplayName: Swift.String {
    get
  }
  public var verionInfo: Swift.String {
    get
  }
}

@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VoiceCallScreenViewController : UIKit.UIViewController, UIKit.UISheetPresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public static let shared: SecuredCallsVoiceSDK.VoiceCallScreenViewController
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency public func showSheet()
  @_Concurrency.MainActor @preconcurrency public func dismissSheet()
  @_Concurrency.MainActor @preconcurrency @objc public func presentationControllerWillDismiss(_ presentationController: UIKit.UIPresentationController)
  @_Concurrency.MainActor @preconcurrency @objc public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerDidDismiss(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerWillBeginDismissalTransition(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerDidEndDismissalTransition(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerDidChangeDetent(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerDidAttemptToDismiss(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @objc deinit
}
public enum VoiceCallScreenPresenter {
  public static func showCallView()
  public static func endAndDismissCallView()
  public static func hideCallView()
}
@objc @_inheritsConvenienceInitializers final public class PipViewController : ObjectiveC.NSObject, Combine.ObservableObject, AVKit.AVPictureInPictureControllerDelegate, AVKit.AVPictureInPictureSampleBufferPlaybackDelegate {
  public static let shared: SecuredCallsVoiceSDK.PipViewController
  public static var isSupported: Swift.Bool {
    get
  }
  @Combine.Published @_projectedValueProperty($renderSize) final public var renderSize: CoreFoundation.CGSize {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $renderSize: Combine.Published<CoreFoundation.CGSize>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isPlaying) final public var isPlaying: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $isPlaying: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($enabled) final public var enabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $enabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc override dynamic public init()
  @objc final public func pictureInPictureControllerDidStartPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc final public func pictureInPictureControllerDidStopPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc final public func pictureInPictureControllerShouldProhibitBackgroundAudioPlayback(_ pictureInPictureController: AVKit.AVPictureInPictureController) -> Swift.Bool
  @objc final public func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, failedToStartPictureInPictureWithError error: any Swift.Error)
  @objc final public func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc final public func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, setPlaying playing: Swift.Bool)
  @objc final public func pictureInPictureControllerIsPlaybackPaused(_ pictureInPictureController: AVKit.AVPictureInPictureController) -> Swift.Bool
  @objc final public func pictureInPictureControllerTimeRangeForPlayback(_ pictureInPictureController: AVKit.AVPictureInPictureController) -> CoreMedia.CMTimeRange
  @objc final public func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, didTransitionToRenderSize newRenderSize: CoreMedia.CMVideoDimensions)
  @objc final public func pictureInPictureController(_ pictureInPictureController: AVKit.AVPictureInPictureController, skipByInterval skipInterval: CoreMedia.CMTime) async
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SwiftUICore.View {
  @warn_unqualified_access
  @_Concurrency.MainActor @preconcurrency public func onPipPlayPause(closure: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View
  
  @warn_unqualified_access
  @_Concurrency.MainActor @preconcurrency public func onPipSkip(closure: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View
  
  @warn_unqualified_access
  @_Concurrency.MainActor @preconcurrency public func onPipStart(closure: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  @warn_unqualified_access
  @_Concurrency.MainActor @preconcurrency public func onPipStop(closure: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  @warn_unqualified_access
  @_Concurrency.MainActor @preconcurrency public func onPipRenderSizeChanged(closure: @escaping (CoreFoundation.CGSize) -> Swift.Void) -> some SwiftUICore.View
  
  @warn_unqualified_access
  @_Concurrency.MainActor @preconcurrency public func pipBindProgress(progress: SwiftUICore.Binding<Swift.Double>) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @warn_unqualified_access
  @_Concurrency.MainActor @preconcurrency public func PipView<PipView>(isPresented: SwiftUICore.Binding<Swift.Bool>, content: @escaping () -> PipView) -> some SwiftUICore.View where PipView : SwiftUICore.View
  
  @warn_unqualified_access
  @_Concurrency.MainActor @preconcurrency public func PipView(isPresented: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
}
@_inheritsConvenienceInitializers @objc(ContactsEntity) public class ContactsEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Foundation.Data {
  public var prettyJson: Swift.String {
    get
  }
}
public struct ScreenDimensions : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor public class DeviceInfoHeader : Swift.Codable {
  @_Concurrency.MainActor public init()
  @_Concurrency.MainActor required public init(from decoder: any Swift.Decoder) throws
  @_Concurrency.MainActor public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}

public protocol ICallStatusDelegate : AnyObject {
  func callStarted()
  func callEnded()
}
public protocol SecuredCallsVoiceDelegate : AnyObject {
  func didUpdateCallHistory()
}
@_hasMissingDesignatedInitializers public class SecuredCallsVoice : Foundation.ObservableObject {
  public static func initialize(_ clientSecret: Swift.String, configFileName: Swift.String = "Config", settings: SecuredCallsVoiceSDK.ScSDKSettingsModel = .default) throws
  public static func loginAsync(identifier: Swift.String, isForceLogin: Swift.Bool = false) async -> Swift.Bool
  public static func reportNewInComingCall(payload: PushKit.PKPushPayload)
  public static func registerVoipTokenAsync(token: Foundation.Data, isProduction: Swift.Bool) async
  public func deRegisterVoipTokenAsync() async
  public static func startCallAsync(number: Swift.String? = nil, callType: SecuredCallsVoiceSDK.CallType, callIntent: Swift.String = "", customData: [Swift.String : Any] = [:]) async throws
  public static func callBackFromCallHistory(callId: Swift.String, number: Swift.String? = nil, callType: SecuredCallsVoiceSDK.CallType, callIntent: Swift.String = "", customData: [Swift.String : Any] = [:]) async throws
  public static func instance() -> SecuredCallsVoiceSDK.SecuredCallsVoice
  public static func processNotificationAsync(request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void) async
  @discardableResult
  public static func registerConsumerAsync(customerId: Swift.String) async -> Swift.Result<Swift.Bool, any Swift.Error>
  @discardableResult
  public static func registerDeviceAsync(customerId: Swift.String, token: Swift.String, isProduction: Swift.Bool = true) async -> Swift.Result<Swift.Bool, any Swift.Error>
  @discardableResult
  public static func deRegisterDeviceAsync(customerId: Swift.String) async -> Swift.Result<Swift.Bool, any Swift.Error>
  public static func getCallHistoryAsync() async -> Swift.Result<[SecuredCallsVoiceSDK.CallInfoModel], any Swift.Error>
  public static func setHistoryDelegate(_ delegate: (any SecuredCallsVoiceSDK.SecuredCallsVoiceDelegate)?)
  public static func setCallStatusDelegate(_ delegate: (any SecuredCallsVoiceSDK.ICallStatusDelegate)?)
  public static func callEnded()
  public static func callStarted()
  public static func processNotification()
  public static func requestNotificationPermissionAsync() async
  public static func requestContactAccessAsync() async
  public class func requestLocationPermissionAsync() async
  public class func getLogs() async -> [Swift.String]
  public class func clearLogs() async
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SecuredCallsVoiceSDK.CallHistoryEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SecuredCallsVoiceSDK.CallHistoryEntity>
  @objc @NSManaged dynamic public var acceptIncomingCalls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandImage: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var callId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var callTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var callType: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var contactNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var intent: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isIncomingCall: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var note: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandingData: SecuredCallsVoiceSDK.BrandingEntity? {
    @objc get
    @objc set
  }
}
extension SecuredCallsVoiceSDK.CallHistoryEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension SecuredCallsVoiceSDK.ContactsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SecuredCallsVoiceSDK.ContactsEntity>
  @objc @NSManaged dynamic public var contactIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
}
public enum LogLevel : Swift.Int {
  case Error
  case Warning
  case Debug
  case Information
  case Off
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}

@_hasMissingDesignatedInitializers public class UserDefaultWrapper {
  public static let shared: SecuredCallsVoiceSDK.UserDefaultWrapper
  public enum UserDefaultsKey : Swift.String {
    case authToken
    case authTokenExpiry
    case consumerRegisterationComplete
    case deviceRegisterationComplete
    case appConfig
    case logs
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func set(_ value: Swift.String, forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey)
  public func getString(forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey) -> Swift.String?
  public func set(_ value: [Swift.String], forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey)
  public func getStringArray(forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey) -> [Swift.String]?
  public func set(_ value: Swift.Bool, forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey)
  public func getBool(forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey) -> Swift.Bool
  public func set(_ value: Swift.Int, forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey)
  public func getInt(forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey) -> Swift.Int
  public func set<T>(_ value: T, forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey) where T : Swift.Decodable, T : Swift.Encodable
  public func getObject<T>(forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey, type: T.Type) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func remove(forKey key: SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey)
  @objc deinit
}
public enum CallType : Swift.Int16, Swift.Codable {
  case inApp
  case pstn
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
public enum CallDirection : Swift.Int16, Swift.Codable {
  case incoming
  case outgoing
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
@_inheritsConvenienceInitializers @objc(UserEntity) public class UserEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct CallInfoModel {
  public var callId: Swift.String
  public var intent: Swift.String
  public var note: Swift.String?
  public var contactNumber: Swift.String
  public var businessName: Swift.String
  public var brandImage: Foundation.Data
  public var acceptIncomingCalls: Swift.Bool
  public var callType: SecuredCallsVoiceSDK.CallType
  public var callTime: Foundation.Date
  public var isIncomingCall: Swift.Bool
}

@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SheetViewController : UIKit.UIViewController, UIKit.UISheetPresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency public func showSheet(isContactPermissionAvailable: Swift.Bool, isNotificationPermissionAvailable: Swift.Bool, isLocationPermissionAvailable: Swift.Bool, isUsingLocationService: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func dismissSheet()
  @_Concurrency.MainActor @preconcurrency @objc public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerDidDismiss(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerWillBeginDismissalTransition(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerDidEndDismissalTransition(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerDidChangeDetent(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency public func sheetPresentationControllerDidAttemptToDismiss(_ sheetPresentationController: UIKit.UISheetPresentationController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum PermissionBottomSheetViewPresenter {
  public static func showSheet(isContactPermissionAvailable: Swift.Bool, isNotificationPermissionAvailable: Swift.Bool, isLocationPermissionAvailable: Swift.Bool, isUsingLocationService: Swift.Bool)
  public static func dismissSheet()
}
extension Foundation.NSNotification {
  public static let didRegisterForRemoteNotificationNotification: Foundation.NSNotification.Name
  public static let didFailToRegisterForRemoteNotification: Foundation.NSNotification.Name
}
extension SecuredCallsVoiceSDK.ConfigEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SecuredCallsVoiceSDK.ConfigEntity>
  @objc @NSManaged dynamic public var showPermissionSheet: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var allowIncomingCallIntent: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var useLocation: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vonageRegion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var signatureIntervalSeconds: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension SecuredCallsVoiceSDK.ConfigEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(ConfigEntity) public class ConfigEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct ScSDKSettingsModel : Swift.Hashable {
  public init(handlePermission: Swift.Bool = true, showPipView: Swift.Bool = true, logLevel: SecuredCallsVoiceSDK.LogLevel = .Off)
  public static let `default`: SecuredCallsVoiceSDK.ScSDKSettingsModel
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SecuredCallsVoiceSDK.ScSDKSettingsModel, b: SecuredCallsVoiceSDK.ScSDKSettingsModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(LogsEntity) public class LogsEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SecuredCallsVoiceSDK.LogsEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SecuredCallsVoiceSDK.LogsEntity>
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var datetime: Foundation.Date? {
    @objc get
    @objc set
  }
}
extension SecuredCallsVoiceSDK.LogsEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(BrandingEntity) public class BrandingEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SecuredCallsVoiceSDK.BrandingEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SecuredCallsVoiceSDK.BrandingEntity>
  @objc @NSManaged dynamic public var answerCallButtonBackgroundColor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var answerCallButtonForegroundColor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var backgroundColor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandImage: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endCallButtonBackgroundColor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endCallButtonForegroundColor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var intent: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var logoHeight: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var logoWidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var otherButtonBackgroundColor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var otherButtonForegroundColor: Swift.String? {
    @objc get
    @objc set
  }
}
extension SecuredCallsVoiceSDK.BrandingEntity : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension SecuredCallsVoiceSDK.LocationError : Swift.Equatable {}
extension SecuredCallsVoiceSDK.LocationError : Swift.Hashable {}
extension SecuredCallsVoiceSDK.MarqueeText : Swift.Sendable {}
extension SecuredCallsVoiceSDK.DeviceInfoHeader : Swift.Sendable {}
extension SecuredCallsVoiceSDK.LogLevel : Swift.Equatable {}
extension SecuredCallsVoiceSDK.LogLevel : Swift.Hashable {}
extension SecuredCallsVoiceSDK.LogLevel : Swift.RawRepresentable {}
extension SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey : Swift.Equatable {}
extension SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey : Swift.Hashable {}
extension SecuredCallsVoiceSDK.UserDefaultWrapper.UserDefaultsKey : Swift.RawRepresentable {}
extension SecuredCallsVoiceSDK.CallType : Swift.Equatable {}
extension SecuredCallsVoiceSDK.CallType : Swift.Hashable {}
extension SecuredCallsVoiceSDK.CallType : Swift.RawRepresentable {}
extension SecuredCallsVoiceSDK.CallDirection : Swift.Equatable {}
extension SecuredCallsVoiceSDK.CallDirection : Swift.Hashable {}
extension SecuredCallsVoiceSDK.CallDirection : Swift.RawRepresentable {}
